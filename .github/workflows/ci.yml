name: Java CI

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Test run mode'
        required: true
        default: 'new_or_changes'
        type: choice
        options:
          - all
          - path
          - new
          - changes
          - new_or_changes
      test_path:
        description: 'Test file or folder path (only for mode=path)'
        required: false
        default: ''

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Detect changed and new test files
        id: collect
        shell: bash
        run: |
          echo "üîÅ Detecting changed files..."
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            echo "Pull request detected, base ref: $BASE_REF"
            git fetch origin "$BASE_REF"
            DIFF_BASE="origin/$BASE_REF"
          else
            echo "Push event detected"
            DIFF_BASE="HEAD^"
          fi
          
          MODIFIED=$(git diff --name-only --diff-filter=MR $DIFF_BASE HEAD | grep '^src/test/java/.*\.java$' || true)
          NEW=$(git diff --name-only --diff-filter=AR $DIFF_BASE HEAD | grep '^src/test/java/.*\.java$' || true)
          COMBINED=$(echo -e "$MODIFIED\n$NEW" | sort -u)
          
          MODIFIED_TESTS=$(echo "$MODIFIED" | tr '\n' ' ' | xargs)
          NEW_TESTS=$(echo "$NEW" | tr '\n' ' ' | xargs)
          COMBINED_TESTS=$(echo "$COMBINED" | tr '\n' ' ' | xargs)
          
          echo "MODIFIED_TESTS=$MODIFIED_TESTS" >> $GITHUB_OUTPUT
          echo "NEW_TESTS=$NEW_TESTS" >> $GITHUB_OUTPUT
          echo "COMBINED_TESTS=$COMBINED_TESTS" >> $GITHUB_OUTPUT

      - name: Run tests
        shell: bash
        run: |
          input_mode="${{ github.event.inputs.mode }}"
          input_path="${{ github.event.inputs.test_path }}"
          mode="${input_mode:-new_or_changes}"
          path="${input_path:-}"
          
          new_tests="${{ steps.collect.outputs.NEW_TESTS }}"
          modified_tests="${{ steps.collect.outputs.MODIFIED_TESTS }}"
          combined_tests="${{ steps.collect.outputs.COMBINED_TESTS }}"
          
          echo "‚ñ∂ Mode: $mode"
          echo "‚ñ∂ Path: $path"
          echo "‚ñ∂ New tests: '$new_tests'"
          echo "‚ñ∂ Modified tests: '$modified_tests'"
          echo "‚ñ∂ Combined tests: '$combined_tests'"
          
          case "$mode" in
            all)
              echo "üß™ Running all tests..."
              mvn clean test
              ;;
            path)
              if [ -z "$path" ]; then
                echo "‚ùå Error: test_path is required when mode=path"
                exit 1
              fi
              echo "üß™ Running tests at: $path"
              # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Maven - –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å –∏–ª–∏ –ø–∞–∫–µ—Ç
              mvn -Dtest="$path" test
              ;;
            new)
              if [ -z "$new_tests" ]; then
                echo "‚ö† No new test files found. Skipping tests."
                exit 0
              fi
              echo "üß™ Running new tests:"
              echo "$new_tests"
              # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Maven -Dtest –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤)
              tests=$(echo $new_tests | sed -E 's|src/test/java/||; s|/|.|g; s|\.java||g')
              mvn -Dtest="$tests" test
              ;;
            changes)
              if [ -z "$modified_tests" ]; then
                echo "‚ö† No modified test files found. Skipping tests."
                exit 0
              fi
              echo "üß™ Running changed tests:"
              echo "$modified_tests"
              tests=$(echo $modified_tests | sed -E 's|src/test/java/||; s|/|.|g; s|\.java||g')
              mvn -Dtest="$tests" test
              ;;
            new_or_changes)
              if [ -z "$combined_tests" ]; then
                echo "‚ö† No new or modified test files found. Skipping tests."
                exit 0
              fi
              echo "üß™ Running new and changed tests:"
              echo "$combined_tests"
              tests=$(echo $combined_tests | sed -E 's|src/test/java/||; s|/|.|g; s|\.java||g')
              mvn -Dtest="$tests" test
              ;;
            *)
              echo "‚ùå Invalid mode: $mode"
              exit 1
              ;;
          esac

